spring.application.name=api.datasource.cooking

# jdbc.X
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://192.168.99.100/palinfo_cooking
jdbc.user=palinfo_cooking
jdbc.pass=6Lyt9beL2mZ

# hibernate.X
hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
hibernate.show_sql=false
hibernate.hbm2ddl.auto=create-drop

#spring.datasource.url=jdbc:mysql://mysql/palinfo_cooking
#spring.datasource.username=palinfo_cooking
#spring.datasource.password=6Lyt9beL2mZ
#spring.datasource.driverClassName=com.mysql.jdbc.Driver
#spring.jpa.hibernate.ddl-auto=update


# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
#spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# Hibernate
#hibernate.current.session.context.class=org.springframework.orm.hibernate5.SpringSessionContext
